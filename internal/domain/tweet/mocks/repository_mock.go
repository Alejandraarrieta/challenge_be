// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/tweet/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "challenge_be/internal/domain/tweet"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 *domain.Tweet) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// GetTweetsByIDs mocks base method.
func (m *MockRepository) GetTweetsByIDs(arg0 context.Context, arg1 []uint64) ([]domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweetsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTweetsByIDs indicates an expected call of GetTweetsByIDs.
func (mr *MockRepositoryMockRecorder) GetTweetsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweetsByIDs", reflect.TypeOf((*MockRepository)(nil).GetTweetsByIDs), arg0, arg1)
}

// ListTweetsByUserID mocks base method.
func (m *MockRepository) ListTweetsByUserID(arg0 context.Context, arg1 uint64) ([]domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTweetsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTweetsByUserID indicates an expected call of ListTweetsByUserID.
func (mr *MockRepositoryMockRecorder) ListTweetsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTweetsByUserID", reflect.TypeOf((*MockRepository)(nil).ListTweetsByUserID), arg0, arg1)
}

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// GetTimeline mocks base method.
func (m *MockCacheRepository) GetTimeline(arg0 context.Context, arg1 uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeline", arg0, arg1)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeline indicates an expected call of GetTimeline.
func (mr *MockCacheRepositoryMockRecorder) GetTimeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeline", reflect.TypeOf((*MockCacheRepository)(nil).GetTimeline), arg0, arg1)
}

// PushTweetToTimeline mocks base method.
func (m *MockCacheRepository) PushTweetToTimeline(arg0 context.Context, arg1 *domain.Tweet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushTweetToTimeline", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushTweetToTimeline indicates an expected call of PushTweetToTimeline.
func (mr *MockCacheRepositoryMockRecorder) PushTweetToTimeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushTweetToTimeline", reflect.TypeOf((*MockCacheRepository)(nil).PushTweetToTimeline), arg0, arg1)
}
