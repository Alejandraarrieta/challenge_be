// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/tweet/getHomeTimeline.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "challenge_be/internal/domain/tweet"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetTimelineUseCase is a mock of GetTimelineUseCase interface.
type MockGetTimelineUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetTimelineUseCaseMockRecorder
}

// MockGetTimelineUseCaseMockRecorder is the mock recorder for MockGetTimelineUseCase.
type MockGetTimelineUseCaseMockRecorder struct {
	mock *MockGetTimelineUseCase
}

// NewMockGetTimelineUseCase creates a new mock instance.
func NewMockGetTimelineUseCase(ctrl *gomock.Controller) *MockGetTimelineUseCase {
	mock := &MockGetTimelineUseCase{ctrl: ctrl}
	mock.recorder = &MockGetTimelineUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTimelineUseCase) EXPECT() *MockGetTimelineUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetTimelineUseCase) Execute(ctx context.Context, userID uint64) ([]domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, userID)
	ret0, _ := ret[0].([]domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetTimelineUseCaseMockRecorder) Execute(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetTimelineUseCase)(nil).Execute), ctx, userID)
}
